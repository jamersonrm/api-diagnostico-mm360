
from flask import Flask, request
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import pandas as pd
import os
import unicodedata

app = Flask(__name__)

# Configura√ß√µes
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDENTIALS_FILE = "/etc/secrets/credenciais.json" if os.getenv("RENDER") else "credenciais.json"

# Planilhas
PLANILHA_LEADS = "Planilha de Diagn√≥stico Leads"
ABA_LEADS = "Leads"
PLANILHA_PERSUASAO = "Biblioteca de Diagn√≥sticos Persuasivos - MM360"

# Autentica√ß√£o
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, SCOPE)
client = gspread.authorize(creds)

def normalizar(texto):
    return unicodedata.normalize('NFKD', texto.strip().lower()).encode('ASCII', 'ignore').decode('utf-8')

def formatar_bloco_persuasivo(bloco):
    return f"""
üß© Diagn√≥stico Persuasivo MM360

üî• Dor Comum: {bloco.get("Dor Comum", "")}
üìä Leitura Estrat√©gica: {bloco.get("Leitura Estrat√©gica", "")}
üöÄ Solu√ß√£o com Tr√°fego Pago: {bloco.get("Solu√ß√£o com Tr√°fego Pago", "")}
üß≠ Jornada do Cliente: {bloco.get("Jornada do Cliente", "")}
üí¨ Frase Pronta: {bloco.get("Frases Persuasivas Prontas", "")}
üìà Proje√ß√£o de Retorno: {bloco.get("Proje√ß√£o de Retorno Sugerida", "")}
‚úÖ CTA Final: {bloco.get("CTA Final de Fechamento", "")}
üìù Observa√ß√µes: {bloco.get("Observa√ß√µes Adicionais", "")}
"""

def formatar_diagnostico(lead, bloco=None):
    bloco_final = formatar_bloco_persuasivo(bloco) if bloco else ""
    return f"""
üß† Diagn√≥stico do Lead: {lead['Nome do Lead']}

üìä Desafio: {lead['Maior Desafio']}
üí∞ Faturamento: {lead['Faturamento']}
üö´ J√° investiu antes? {lead['J√° investiu em marketing digital antes?']}

üì± Instagram:
  - Bio otimizada: {lead['Bio otimizada (SIM/N√ÉO)']}
  - Destaques organizados: {lead['Destaques organizados (SIM/N√ÉO)']}
  - Frequ√™ncia de postagens: {lead['Frequ√™ncia de postagens (Alta/M√©dia/Baixa)']}
  - Engajamento real: {lead['Engajamento real (SIM/N√ÉO)']}
  - Conte√∫do focado em vendas: {lead['Conte√∫do focado em vendas (SIM/N√ÉO)']}

üåê Site:
  - Link: {lead['Site/Landing Page']}
  - Mobile-friendly: {lead['Site mobile-friendly (SIM/N√ÉO)']}
  - Carregamento r√°pido: {lead['Carregamento r√°pido (SIM/N√ÉO)']}
  - Bot√µes de convers√£o claros: {lead['Bot√µes de convers√£o claros (SIM/N√ÉO)']}
  - SEO otimizado: {lead['SEO otimizado (SIM/N√ÉO)']}
  - Prova social: {lead['Possui prova social (SIM/N√ÉO)']}

üìç Google Meu Neg√≥cio:
  - Perfil atualizado: {lead['Perfil atualizado (SIM/N√ÉO)']}
  - Boas avalia√ß√µes: {lead['Boas avalia√ß√µes (SIM/N√ÉO)']}
  - Aparece nas buscas relevantes: {lead['Aparece nas buscas relevantes (SIM/N√ÉO)']}
  - Fotos e informa√ß√µes completas: {lead['Fotos e informa√ß√µes completas (SIM/N√ÉO)']}

üìà Tr√°fego Pago:
  - Pixel instalado: {lead['Pixel/Google Tag instalado (SIM/N√ÉO)']}
  - An√∫ncios ativos: {lead['An√∫ncios ativos (SIM/N√ÉO)']}
  - Faz remarketing: {lead['Faz remarketing? (SIM/N√ÉO)']}

üèÅ Concorr√™ncia:
  - 1: {lead['Concorrente 1']}
  - 2: {lead['Concorrente 2']}
  - 3: {lead['Concorrente 3']}
  - O que fazem melhor: {lead['O que os concorrentes fazem melhor?']}

‚≠ê Diferenciais: {lead['Diferenciais do lead']}
üìù Observa√ß√µes: {lead['Observa√ß√µes Gerais']}

{bloco_final}
"""

@app.route("/gerar_diagnostico", methods=["GET"])
def gerar_diagnostico():
    try:
        aba_leads = client.open(PLANILHA_LEADS).worksheet(ABA_LEADS)
        raw_data = aba_leads.get_all_values()
        headers = raw_data[0]
        values = raw_data[1:]
        df = pd.DataFrame(values, columns=headers)
        df = df[df['Nome do Lead'].str.strip() != ""]

        if 'linha' not in request.args:
            return "Par√¢metro 'linha' obrigat√≥rio."
        linha = int(request.args.get("linha"))
        if linha < 2 or linha > (len(df) + 1):
            return f"Linha {linha} n√£o encontrada. Total de linhas: {len(df)}"
        lead = df.iloc[linha - 2]

        nicho_manual = lead.get("Nicho", "").strip().lower()
        campos_texto = " ".join([lead.get("Bio otimizada (SIM/N√ÉO)", ""),
                                 lead.get("Conte√∫do focado em vendas (SIM/N√ÉO)", ""),
                                 lead.get("Observa√ß√µes Gerais", "")]).lower()

        possiveis_nichos = ["terapeutas", "psic√≥logos", "est√©tica", "beleza", "tatuadores", "dentistas", "crossfit"]
        nicho_detectado = ""

        if nicho_manual:
            nicho_detectado = nicho_manual
        else:
            for n in possiveis_nichos:
                if n in campos_texto:
                    nicho_detectado = n
                    break

        if not nicho_detectado:
            nicho_detectado = "modelo geral"

        planilha_persuasao = client.open(PLANILHA_PERSUASAO)
        try:
            aba_nicho = planilha_persuasao.worksheet(nicho_detectado.title())
        except:
            headers = ["Dor Comum","Leitura Estrat√©gica","Solu√ß√£o com Tr√°fego Pago","Jornada do Cliente",
                       "Frases Persuasivas Prontas","Proje√ß√£o de Retorno Sugerida",
                       "CTA Final de Fechamento","Observa√ß√µes Adicionais"]
            aba_nicho = planilha_persuasao.add_worksheet(title=nicho_detectado.title(), rows="100", cols=str(len(headers)))
            aba_nicho.append_row(headers)

        dados_persuasao = aba_nicho.get_all_records()
        bloco = dados_persuasao[0] if dados_persuasao else {}

        return f"<pre>{formatar_diagnostico(lead, bloco)}</pre>"

    except Exception as e:
        return f"Erro ao gerar diagn√≥stico: {str(e)}"

@app.route("/")
def home():
    return "API MM360 ativa. Use /gerar_diagnostico?linha=X para rodar o diagn√≥stico completo."

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5001, debug=True)
